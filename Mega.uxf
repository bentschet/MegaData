<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>56</x>
      <y>32</y>
      <w>312</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode * 
--
+ getNodeData() : int
+ getNodePointer() : intNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode): constructor

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>424</x>
      <y>32</y>
      <w>312</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>16</x>
      <y>808</y>
      <w>112</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Created by Benbo
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>56</x>
      <y>256</y>
      <w>312</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; * 
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>488</x>
      <y>272</y>
      <w>392</w>
      <h>304</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
-
Data Members

- front : Node&lt;Type&gt; * 
- size : int
-
Constructors

+ Array() : constructor
+ Array(int size) : constructor

Methods

+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *

+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

Advanced

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor


bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>352</y>
      <w>144</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>120</y>
      <w>80</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>40</x>
      <y>0</y>
      <w>704</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>Typed Sample
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>488</x>
      <y>584</y>
      <w>392</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
-
- size : int
- front : Node&lt;Type&gt; *
-
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>392</y>
      <w>144</w>
      <h>344</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>160.0;410.0;110.0;410.0;110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>496</y>
      <w>352</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
-
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; * 
-
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : construct
+ BiDirectionalNode(Type data, 
        BiDirectionalNode&lt;Type&gt;* previous, 
        BiDirectionalNode&lt;Type&gt; * next) : constructor
+ getNodeData() : Type
+ setNodeData(Type data) : void 
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; * 
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>216</x>
      <y>432</y>
      <w>24</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>144</x>
      <y>856</y>
      <w>312</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;Type&gt;/
-
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
-
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add(Type value)
+ remove(int)

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>216</x>
      <y>696</y>
      <w>112</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
0..n</panel_attributes>
    <additional_attributes>120.0;200.0;120.0;80.0;10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>1168</y>
      <w>80</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Queue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>232</x>
      <y>1168</y>
      <w>160</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Stack
-

-
add(Type data) : void
remove(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>1168</y>
      <w>256</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
-
- front : BiDirectionalNode *
-
+ add(Type) : void
+ addAtIndex(int index, Type data) : void 
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>104</x>
      <y>1040</y>
      <w>224</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>304</x>
      <y>1040</y>
      <w>24</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>304</x>
      <y>1040</y>
      <w>256</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;300.0;160.0</additional_attributes>
  </element>
</diagram>
